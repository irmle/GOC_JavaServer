// automatically generated by the FlatBuffers compiler, do not modify

package RMI.RMI_Classes.RMI_InitClasses;
import RMI.RMI_Common._RMI_ParsingClasses.*;
import RMI.RMI_Classes.*;
import RMI.RMI_Classes.RMI_InitClasses.*;
import io.netty.buffer.*;
import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_RMI_Send_EncryptedAccept_Data extends Table {
  public static flat_RMI_Send_EncryptedAccept_Data getRootAsflat_RMI_Send_EncryptedAccept_Data(ByteBuffer _bb) { return getRootAsflat_RMI_Send_EncryptedAccept_Data(_bb, new flat_RMI_Send_EncryptedAccept_Data()); }
  public static flat_RMI_Send_EncryptedAccept_Data getRootAsflat_RMI_Send_EncryptedAccept_Data(ByteBuffer _bb, flat_RMI_Send_EncryptedAccept_Data obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getInt(vtable_start); }
  public flat_RMI_Send_EncryptedAccept_Data __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte AESEncryptedPublicAESKey(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int AESEncryptedPublicAESKeyLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer AESEncryptedPublicAESKeyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer AESEncryptedPublicAESKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public byte AESEncryptedPublicAESIV(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int AESEncryptedPublicAESIVLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer AESEncryptedPublicAESIVAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer AESEncryptedPublicAESIVInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int RMIHostID() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int UDPInitPort() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createflat_RMI_Send_EncryptedAccept_Data(FlatBufferBuilder builder,
      int AESEncrypted_PublicAESKeyOffset,
      int AESEncrypted_PublicAESIVOffset,
      int RMI_HostID,
      int UDP_InitPort) {
    builder.startObject(4);
    flat_RMI_Send_EncryptedAccept_Data.addRMIHostID(builder, RMI_HostID);
    flat_RMI_Send_EncryptedAccept_Data.addAESEncryptedPublicAESIV(builder, AESEncrypted_PublicAESIVOffset);
    flat_RMI_Send_EncryptedAccept_Data.addAESEncryptedPublicAESKey(builder, AESEncrypted_PublicAESKeyOffset);
    flat_RMI_Send_EncryptedAccept_Data.addUDPInitPort(builder, UDP_InitPort);
    return flat_RMI_Send_EncryptedAccept_Data.endflat_RMI_Send_EncryptedAccept_Data(builder);
  }

  public static void startflat_RMI_Send_EncryptedAccept_Data(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addAESEncryptedPublicAESKey(FlatBufferBuilder builder, int AESEncryptedPublicAESKeyOffset) { builder.addOffset(0, AESEncryptedPublicAESKeyOffset, 0); }
  public static int createAESEncryptedPublicAESKeyVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startAESEncryptedPublicAESKeyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addAESEncryptedPublicAESIV(FlatBufferBuilder builder, int AESEncryptedPublicAESIVOffset) { builder.addOffset(1, AESEncryptedPublicAESIVOffset, 0); }
  public static int createAESEncryptedPublicAESIVVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startAESEncryptedPublicAESIVVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addRMIHostID(FlatBufferBuilder builder, int RMIHostID) { builder.addInt(2, RMIHostID, 0); }
  public static void addUDPInitPort(FlatBufferBuilder builder, int UDPInitPort) { builder.addInt(3, UDPInitPort, 0); }
  public static int endflat_RMI_Send_EncryptedAccept_Data(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_RMI_Send_EncryptedAccept_Data(FlatBufferBuilder builder,
 RMI_Send_EncryptedAccept_Data data) {
        int AESEncrypted_PublicAESKeyOffset = createAESEncryptedPublicAESKeyVector(builder, data.AESEncrypted_PublicAESKey);
        int AESEncrypted_PublicAESIVOffset = createAESEncryptedPublicAESIVVector(builder, data.AESEncrypted_PublicAESIV);
        return createflat_RMI_Send_EncryptedAccept_Data(builder , AESEncrypted_PublicAESKeyOffset, AESEncrypted_PublicAESIVOffset, data.RMI_HostID, data.UDP_InitPort);
    }

    public static byte[] createflat_RMI_Send_EncryptedAccept_Data(RMI_Send_EncryptedAccept_Data data) {
        FlatBufferBuilder fbb = PooledFlatBufferBuilder.DEFAULT.poll();
        fbb.finish(flat_RMI_Send_EncryptedAccept_Data.createflat_RMI_Send_EncryptedAccept_Data(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb.clear(); PooledFlatBufferBuilder.DEFAULT.offer(fbb);
        return result;
    }

    public static RMI_Send_EncryptedAccept_Data getRootAsflat_RMI_Send_EncryptedAccept_Data(byte[] data) {
        ByteBuf readData = PooledByteBufAllocator.DEFAULT.directBuffer(data.length);
        readData.writeBytes(data);
        RMI_Send_EncryptedAccept_Data result = new RMI_Send_EncryptedAccept_Data(flat_RMI_Send_EncryptedAccept_Data.getRootAsflat_RMI_Send_EncryptedAccept_Data( readData.nioBuffer() ) );
        readData.release();
        return result;
    }
}