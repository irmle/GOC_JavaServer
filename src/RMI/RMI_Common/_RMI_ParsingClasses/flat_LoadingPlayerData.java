// automatically generated by the FlatBuffers compiler, do not modify

package RMI.RMI_Common._RMI_ParsingClasses;
import RMI.RMI_Common._RMI_ParsingClasses.*;
import RMI.RMI_Classes.*;
import RMI.AutoCreatedClass.*;
import io.netty.buffer.*;
import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_LoadingPlayerData extends Table {
  public static flat_LoadingPlayerData getRootAsflat_LoadingPlayerData(ByteBuffer _bb) { return getRootAsflat_LoadingPlayerData(_bb, new flat_LoadingPlayerData()); }
  public static flat_LoadingPlayerData getRootAsflat_LoadingPlayerData(ByteBuffer _bb, flat_LoadingPlayerData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_LoadingPlayerData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String tokenID() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tokenIDAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer tokenIDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int characterType() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String characterName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer characterNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer characterNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public float currentProgressPercentage() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createflat_LoadingPlayerData(FlatBufferBuilder builder,
      int tokenIDOffset,
      int characterType,
      int characterNameOffset,
      float currentProgressPercentage) {
    builder.startObject(4);
    flat_LoadingPlayerData.addCurrentProgressPercentage(builder, currentProgressPercentage);
    flat_LoadingPlayerData.addCharacterName(builder, characterNameOffset);
    flat_LoadingPlayerData.addCharacterType(builder, characterType);
    flat_LoadingPlayerData.addTokenID(builder, tokenIDOffset);
    return flat_LoadingPlayerData.endflat_LoadingPlayerData(builder);
  }

  public static void startflat_LoadingPlayerData(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addTokenID(FlatBufferBuilder builder, int tokenIDOffset) { builder.addOffset(0, tokenIDOffset, 0); }
  public static void addCharacterType(FlatBufferBuilder builder, int characterType) { builder.addInt(1, characterType, 0); }
  public static void addCharacterName(FlatBufferBuilder builder, int characterNameOffset) { builder.addOffset(2, characterNameOffset, 0); }
  public static void addCurrentProgressPercentage(FlatBufferBuilder builder, float currentProgressPercentage) { builder.addFloat(3, currentProgressPercentage, 0.0f); }
  public static int endflat_LoadingPlayerData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_LoadingPlayerData(FlatBufferBuilder builder,
 LoadingPlayerData data) {
        int tokenIDOffset = builder.createString(data.tokenID);
        int characterNameOffset = builder.createString(data.characterName);
        return createflat_LoadingPlayerData(builder , tokenIDOffset, data.characterType, characterNameOffset, data.currentProgressPercentage);
    }

    public static byte[] createflat_LoadingPlayerData(LoadingPlayerData data) {
        FlatBufferBuilder fbb = PooledFlatBufferBuilder.DEFAULT.poll();
        fbb.finish(flat_LoadingPlayerData.createflat_LoadingPlayerData(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb.clear(); PooledFlatBufferBuilder.DEFAULT.offer(fbb);
        return result;
    }

    public static LoadingPlayerData getRootAsflat_LoadingPlayerData(byte[] data) {
        ByteBuf readData = PooledByteBufAllocator.DEFAULT.directBuffer(data.length);
        readData.writeBytes(data);
        LoadingPlayerData result = new LoadingPlayerData(flat_LoadingPlayerData.getRootAsflat_LoadingPlayerData( readData.nioBuffer() ) );
        readData.release();
        return result;
    }

}