// automatically generated by the FlatBuffers compiler, do not modify

package RMI.RMI_Common._RMI_ParsingClasses;
import RMI.RMI_Common._RMI_ParsingClasses.*;
import RMI.RMI_Classes.*;
import RMI.AutoCreatedClass.*;
import io.netty.buffer.*;
import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_pickLogicStart extends Table {
  public static flat_pickLogicStart getRootAsflat_pickLogicStart(ByteBuffer _bb) { return getRootAsflat_pickLogicStart(_bb, new flat_pickLogicStart()); }
  public static flat_pickLogicStart getRootAsflat_pickLogicStart(ByteBuffer _bb, flat_pickLogicStart obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_pickLogicStart __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public flat_LoadingPlayerData loadingPlayerList(int j) { return loadingPlayerList(new flat_LoadingPlayerData(), j); }
  public flat_LoadingPlayerData loadingPlayerList(flat_LoadingPlayerData obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int loadingPlayerListLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createflat_pickLogicStart(FlatBufferBuilder builder,
      int loadingPlayerListOffset) {
    builder.startObject(1);
    flat_pickLogicStart.addLoadingPlayerList(builder, loadingPlayerListOffset);
    return flat_pickLogicStart.endflat_pickLogicStart(builder);
  }

  public static void startflat_pickLogicStart(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addLoadingPlayerList(FlatBufferBuilder builder, int loadingPlayerListOffset) { builder.addOffset(0, loadingPlayerListOffset, 0); }
  public static int createLoadingPlayerListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLoadingPlayerListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endflat_pickLogicStart(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_pickLogicStart(FlatBufferBuilder builder,
 pickLogicStart data) {
        int size0 = data.loadingPlayerList.size();
        int[] loadingPlayerList_ = new int[size0];
        for (int x = 0; x < size0; x++) {
        LoadingPlayerData aa = data.loadingPlayerList.poll();
        loadingPlayerList_[x] = flat_LoadingPlayerData.createflat_LoadingPlayerData(builder, aa);
        }
        int loadingPlayerListOffset = flat_pickLogicStart.createLoadingPlayerListVector(builder, loadingPlayerList_);
        return createflat_pickLogicStart(builder , loadingPlayerListOffset);
    }

    public static byte[] createflat_pickLogicStart(pickLogicStart data) {
        FlatBufferBuilder fbb = PooledFlatBufferBuilder.DEFAULT.poll();
        fbb.finish(flat_pickLogicStart.createflat_pickLogicStart(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb.clear(); PooledFlatBufferBuilder.DEFAULT.offer(fbb);
        return result;
    }

    public static pickLogicStart getRootAsflat_pickLogicStart(byte[] data) {
        ByteBuf readData = PooledByteBufAllocator.DEFAULT.directBuffer(data.length);
        readData.writeBytes(data);
        pickLogicStart result = new pickLogicStart(flat_pickLogicStart.getRootAsflat_pickLogicStart( readData.nioBuffer() ) );
        readData.release();
        return result;
    }

}