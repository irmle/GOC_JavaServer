// automatically generated by the FlatBuffers compiler, do not modify

package RMI.RMI_Common._RMI_ParsingClasses;
import RMI.RMI_Common._RMI_ParsingClasses.*;
import RMI.RMI_Classes.*;
import RMI.AutoCreatedClass.*;
import io.netty.buffer.*;
import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_broadcastingDamageAmount extends Table {
  public static flat_broadcastingDamageAmount getRootAsflat_broadcastingDamageAmount(ByteBuffer _bb) { return getRootAsflat_broadcastingDamageAmount(_bb, new flat_broadcastingDamageAmount()); }
  public static flat_broadcastingDamageAmount getRootAsflat_broadcastingDamageAmount(ByteBuffer _bb, flat_broadcastingDamageAmount obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_broadcastingDamageAmount __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int damageType() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int entityID() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float damageAmount() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createflat_broadcastingDamageAmount(FlatBufferBuilder builder,
      int damageType,
      int entityID,
      float damageAmount) {
    builder.startObject(3);
    flat_broadcastingDamageAmount.addDamageAmount(builder, damageAmount);
    flat_broadcastingDamageAmount.addEntityID(builder, entityID);
    flat_broadcastingDamageAmount.addDamageType(builder, damageType);
    return flat_broadcastingDamageAmount.endflat_broadcastingDamageAmount(builder);
  }

  public static void startflat_broadcastingDamageAmount(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addDamageType(FlatBufferBuilder builder, int damageType) { builder.addInt(0, damageType, 0); }
  public static void addEntityID(FlatBufferBuilder builder, int entityID) { builder.addInt(1, entityID, 0); }
  public static void addDamageAmount(FlatBufferBuilder builder, float damageAmount) { builder.addFloat(2, damageAmount, 0.0f); }
  public static int endflat_broadcastingDamageAmount(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_broadcastingDamageAmount(FlatBufferBuilder builder,
 broadcastingDamageAmount data) {
        return createflat_broadcastingDamageAmount(builder , data.damageType, data.entityID, data.damageAmount);
    }

    public static byte[] createflat_broadcastingDamageAmount(broadcastingDamageAmount data) {
        FlatBufferBuilder fbb = PooledFlatBufferBuilder.DEFAULT.poll();
        fbb.finish(flat_broadcastingDamageAmount.createflat_broadcastingDamageAmount(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb.clear(); PooledFlatBufferBuilder.DEFAULT.offer(fbb);
        return result;
    }

    public static broadcastingDamageAmount getRootAsflat_broadcastingDamageAmount(byte[] data) {
        ByteBuf readData = PooledByteBufAllocator.DEFAULT.directBuffer(data.length);
        readData.writeBytes(data);
        broadcastingDamageAmount result = new broadcastingDamageAmount(flat_broadcastingDamageAmount.getRootAsflat_broadcastingDamageAmount( readData.nioBuffer() ) );
        readData.release();
        return result;
    }

}