// automatically generated by the FlatBuffers compiler, do not modify

package RMI.RMI_Common._RMI_ParsingClasses;
import RMI.RMI_Common._RMI_ParsingClasses.*;
import RMI.RMI_Classes.*;
import RMI.AutoCreatedClass.*;
import io.netty.buffer.*;
import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_pickLogicConnectToVoipHost extends Table {
  public static flat_pickLogicConnectToVoipHost getRootAsflat_pickLogicConnectToVoipHost(ByteBuffer _bb) { return getRootAsflat_pickLogicConnectToVoipHost(_bb, new flat_pickLogicConnectToVoipHost()); }
  public static flat_pickLogicConnectToVoipHost getRootAsflat_pickLogicConnectToVoipHost(ByteBuffer _bb, flat_pickLogicConnectToVoipHost obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_pickLogicConnectToVoipHost __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean isVoipOK() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int worldMapID() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createflat_pickLogicConnectToVoipHost(FlatBufferBuilder builder,
      boolean isVoipOK,
      int worldMapID) {
    builder.startObject(2);
    flat_pickLogicConnectToVoipHost.addWorldMapID(builder, worldMapID);
    flat_pickLogicConnectToVoipHost.addIsVoipOK(builder, isVoipOK);
    return flat_pickLogicConnectToVoipHost.endflat_pickLogicConnectToVoipHost(builder);
  }

  public static void startflat_pickLogicConnectToVoipHost(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addIsVoipOK(FlatBufferBuilder builder, boolean isVoipOK) { builder.addBoolean(0, isVoipOK, false); }
  public static void addWorldMapID(FlatBufferBuilder builder, int worldMapID) { builder.addInt(1, worldMapID, 0); }
  public static int endflat_pickLogicConnectToVoipHost(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_pickLogicConnectToVoipHost(FlatBufferBuilder builder,
 pickLogicConnectToVoipHost data) {
        return createflat_pickLogicConnectToVoipHost(builder , data.isVoipOK, data.worldMapID);
    }

    public static byte[] createflat_pickLogicConnectToVoipHost(pickLogicConnectToVoipHost data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_pickLogicConnectToVoipHost.createflat_pickLogicConnectToVoipHost(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static pickLogicConnectToVoipHost getRootAsflat_pickLogicConnectToVoipHost(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        pickLogicConnectToVoipHost result = new pickLogicConnectToVoipHost(flat_pickLogicConnectToVoipHost.getRootAsflat_pickLogicConnectToVoipHost( buf ) );
        buf = null;
        return result;
    }

}