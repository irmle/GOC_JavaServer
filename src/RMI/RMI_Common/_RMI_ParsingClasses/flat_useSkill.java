// automatically generated by the FlatBuffers compiler, do not modify

package RMI.RMI_Common._RMI_ParsingClasses;
import RMI.RMI_Common._RMI_ParsingClasses.*;
import RMI.RMI_Classes.*;
import RMI.AutoCreatedClass.*;
import io.netty.buffer.*;
import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_useSkill extends Table {
  public static flat_useSkill getRootAsflat_useSkill(ByteBuffer _bb) { return getRootAsflat_useSkill(_bb, new flat_useSkill()); }
  public static flat_useSkill getRootAsflat_useSkill(ByteBuffer _bb, flat_useSkill obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_useSkill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int worldMapID() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int userEntityID() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float directionX() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float directionY() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float directionZ() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float distanceRate() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public short skillSlotNum() { int o = __offset(16); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public int targetEntityID() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createflat_useSkill(FlatBufferBuilder builder,
      int worldMapID,
      int userEntityID,
      float directionX,
      float directionY,
      float directionZ,
      float distanceRate,
      short skillSlotNum,
      int targetEntityID) {
    builder.startObject(8);
    flat_useSkill.addTargetEntityID(builder, targetEntityID);
    flat_useSkill.addDistanceRate(builder, distanceRate);
    flat_useSkill.addDirectionZ(builder, directionZ);
    flat_useSkill.addDirectionY(builder, directionY);
    flat_useSkill.addDirectionX(builder, directionX);
    flat_useSkill.addUserEntityID(builder, userEntityID);
    flat_useSkill.addWorldMapID(builder, worldMapID);
    flat_useSkill.addSkillSlotNum(builder, skillSlotNum);
    return flat_useSkill.endflat_useSkill(builder);
  }

  public static void startflat_useSkill(FlatBufferBuilder builder) { builder.startObject(8); }
  public static void addWorldMapID(FlatBufferBuilder builder, int worldMapID) { builder.addInt(0, worldMapID, 0); }
  public static void addUserEntityID(FlatBufferBuilder builder, int userEntityID) { builder.addInt(1, userEntityID, 0); }
  public static void addDirectionX(FlatBufferBuilder builder, float directionX) { builder.addFloat(2, directionX, 0.0f); }
  public static void addDirectionY(FlatBufferBuilder builder, float directionY) { builder.addFloat(3, directionY, 0.0f); }
  public static void addDirectionZ(FlatBufferBuilder builder, float directionZ) { builder.addFloat(4, directionZ, 0.0f); }
  public static void addDistanceRate(FlatBufferBuilder builder, float distanceRate) { builder.addFloat(5, distanceRate, 0.0f); }
  public static void addSkillSlotNum(FlatBufferBuilder builder, short skillSlotNum) { builder.addShort(6, skillSlotNum, 0); }
  public static void addTargetEntityID(FlatBufferBuilder builder, int targetEntityID) { builder.addInt(7, targetEntityID, 0); }
  public static int endflat_useSkill(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_useSkill(FlatBufferBuilder builder,
 useSkill data) {
        return createflat_useSkill(builder , data.worldMapID, data.userEntityID, data.directionX, data.directionY, data.directionZ, data.distanceRate, data.skillSlotNum, data.targetEntityID);
    }

    public static byte[] createflat_useSkill(useSkill data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_useSkill.createflat_useSkill(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static useSkill getRootAsflat_useSkill(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        useSkill result = new useSkill(flat_useSkill.getRootAsflat_useSkill( buf ) );
        buf = null;
        return result;
    }

}