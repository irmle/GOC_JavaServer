// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;
import Network.AutoCreatedClass.*;

import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;
@SuppressWarnings("unused")
public final class flat_ItemSlotData extends Table {
  public static flat_ItemSlotData getRootAsflat_ItemSlotData(ByteBuffer _bb) { return getRootAsflat_ItemSlotData(_bb, new flat_ItemSlotData()); }
  public static flat_ItemSlotData getRootAsflat_ItemSlotData(ByteBuffer _bb, flat_ItemSlotData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_ItemSlotData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int slotNum() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public flat_ItemInfoData itemInfo() { return itemInfo(new flat_ItemInfoData()); }
  public flat_ItemInfoData itemInfo(flat_ItemInfoData obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int itemCount() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float remainCoolTime() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createflat_ItemSlotData(FlatBufferBuilder builder,
      int slotNum,
      int itemInfoOffset,
      int itemCount,
      float remainCoolTime) {
    builder.startObject(4);
    flat_ItemSlotData.addRemainCoolTime(builder, remainCoolTime);
    flat_ItemSlotData.addItemCount(builder, itemCount);
    flat_ItemSlotData.addItemInfo(builder, itemInfoOffset);
    flat_ItemSlotData.addSlotNum(builder, slotNum);
    return flat_ItemSlotData.endflat_ItemSlotData(builder);
  }

  public static void startflat_ItemSlotData(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addSlotNum(FlatBufferBuilder builder, int slotNum) { builder.addInt(0, slotNum, 0); }
  public static void addItemInfo(FlatBufferBuilder builder, int itemInfoOffset) { builder.addOffset(1, itemInfoOffset, 0); }
  public static void addItemCount(FlatBufferBuilder builder, int itemCount) { builder.addInt(2, itemCount, 0); }
  public static void addRemainCoolTime(FlatBufferBuilder builder, float remainCoolTime) { builder.addFloat(3, remainCoolTime, 0.0f); }
  public static int endflat_ItemSlotData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_ItemSlotData(FlatBufferBuilder builder,
 ItemSlotData data) {
        int itemInfoOffset = flat_ItemInfoData.createflat_ItemInfoData(builder, data.itemInfo);
        return createflat_ItemSlotData(builder , data.slotNum, itemInfoOffset, data.itemCount, data.remainCoolTime);
    }

    public static byte[] createflat_ItemSlotData(ItemSlotData data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_ItemSlotData.createflat_ItemSlotData(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static ItemSlotData getRootAsflat_ItemSlotData(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        ItemSlotData result = new ItemSlotData(flat_ItemSlotData.getRootAsflat_ItemSlotData( buf ) );
        buf = null;
        return result;
    }

}