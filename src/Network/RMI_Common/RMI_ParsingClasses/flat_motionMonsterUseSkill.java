// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;

import Network.RMI_Classes.*;
import Network.AutoCreatedClass.*;
import io.netty.buffer.*;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_motionMonsterUseSkill extends Table {
  public static flat_motionMonsterUseSkill getRootAsflat_motionMonsterUseSkill(ByteBuffer _bb) { return getRootAsflat_motionMonsterUseSkill(_bb, new flat_motionMonsterUseSkill()); }
  public static flat_motionMonsterUseSkill getRootAsflat_motionMonsterUseSkill(ByteBuffer _bb, flat_motionMonsterUseSkill obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_motionMonsterUseSkill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int monsterEntityID() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public flat_SkillInfoData usedSkill() { return usedSkill(new flat_SkillInfoData()); }
  public flat_SkillInfoData usedSkill(flat_SkillInfoData obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createflat_motionMonsterUseSkill(FlatBufferBuilder builder,
      int monsterEntityID,
      int usedSkillOffset) {
    builder.startObject(2);
    flat_motionMonsterUseSkill.addUsedSkill(builder, usedSkillOffset);
    flat_motionMonsterUseSkill.addMonsterEntityID(builder, monsterEntityID);
    return flat_motionMonsterUseSkill.endflat_motionMonsterUseSkill(builder);
  }

  public static void startflat_motionMonsterUseSkill(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addMonsterEntityID(FlatBufferBuilder builder, int monsterEntityID) { builder.addInt(0, monsterEntityID, 0); }
  public static void addUsedSkill(FlatBufferBuilder builder, int usedSkillOffset) { builder.addOffset(1, usedSkillOffset, 0); }
  public static int endflat_motionMonsterUseSkill(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_motionMonsterUseSkill(FlatBufferBuilder builder,
 motionMonsterUseSkill data) {
        int usedSkillOffset = flat_SkillInfoData.createflat_SkillInfoData(builder, data.usedSkill);
        return createflat_motionMonsterUseSkill(builder , data.monsterEntityID, usedSkillOffset);
    }

    public static byte[] createflat_motionMonsterUseSkill(motionMonsterUseSkill data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_motionMonsterUseSkill.createflat_motionMonsterUseSkill(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static motionMonsterUseSkill getRootAsflat_motionMonsterUseSkill(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        motionMonsterUseSkill result = new motionMonsterUseSkill(flat_motionMonsterUseSkill.getRootAsflat_motionMonsterUseSkill( buf ) );
        buf = null;
        return result;
    }

}