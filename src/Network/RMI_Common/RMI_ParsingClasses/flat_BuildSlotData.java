// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;

import Network.RMI_Classes.*;
import Network.AutoCreatedClass.*;
import io.netty.buffer.*;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_BuildSlotData extends Table {
  public static flat_BuildSlotData getRootAsflat_BuildSlotData(ByteBuffer _bb) { return getRootAsflat_BuildSlotData(_bb, new flat_BuildSlotData()); }
  public static flat_BuildSlotData getRootAsflat_BuildSlotData(ByteBuffer _bb, flat_BuildSlotData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_BuildSlotData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int buildType() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int slotNum() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int slotState() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float centerX() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float centerY() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float centerZ() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float remainBuildTime() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createflat_BuildSlotData(FlatBufferBuilder builder,
      int buildType,
      int slotNum,
      int slotState,
      float centerX,
      float centerY,
      float centerZ,
      float remainBuildTime) {
    builder.startObject(7);
    flat_BuildSlotData.addRemainBuildTime(builder, remainBuildTime);
    flat_BuildSlotData.addCenterZ(builder, centerZ);
    flat_BuildSlotData.addCenterY(builder, centerY);
    flat_BuildSlotData.addCenterX(builder, centerX);
    flat_BuildSlotData.addSlotState(builder, slotState);
    flat_BuildSlotData.addSlotNum(builder, slotNum);
    flat_BuildSlotData.addBuildType(builder, buildType);
    return flat_BuildSlotData.endflat_BuildSlotData(builder);
  }

  public static void startflat_BuildSlotData(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addBuildType(FlatBufferBuilder builder, int buildType) { builder.addInt(0, buildType, 0); }
  public static void addSlotNum(FlatBufferBuilder builder, int slotNum) { builder.addInt(1, slotNum, 0); }
  public static void addSlotState(FlatBufferBuilder builder, int slotState) { builder.addInt(2, slotState, 0); }
  public static void addCenterX(FlatBufferBuilder builder, float centerX) { builder.addFloat(3, centerX, 0.0f); }
  public static void addCenterY(FlatBufferBuilder builder, float centerY) { builder.addFloat(4, centerY, 0.0f); }
  public static void addCenterZ(FlatBufferBuilder builder, float centerZ) { builder.addFloat(5, centerZ, 0.0f); }
  public static void addRemainBuildTime(FlatBufferBuilder builder, float remainBuildTime) { builder.addFloat(6, remainBuildTime, 0.0f); }
  public static int endflat_BuildSlotData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_BuildSlotData(FlatBufferBuilder builder,
 BuildSlotData data) {
        return createflat_BuildSlotData(builder , data.buildType, data.slotNum, data.slotState, data.centerX, data.centerY, data.centerZ, data.remainBuildTime);
    }

    public static byte[] createflat_BuildSlotData(BuildSlotData data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_BuildSlotData.createflat_BuildSlotData(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static BuildSlotData getRootAsflat_BuildSlotData(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        BuildSlotData result = new BuildSlotData(flat_BuildSlotData.getRootAsflat_BuildSlotData( buf ) );
        buf = null;
        return result;
    }

}