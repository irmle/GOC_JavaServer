// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;

import Network.RMI_Classes.*;
import Network.AutoCreatedClass.*;
import io.netty.buffer.*;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_SkillSlotData extends Table {
  public static flat_SkillSlotData getRootAsflat_SkillSlotData(ByteBuffer _bb) { return getRootAsflat_SkillSlotData(_bb, new flat_SkillSlotData()); }
  public static flat_SkillSlotData getRootAsflat_SkillSlotData(ByteBuffer _bb, flat_SkillSlotData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_SkillSlotData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int slotNum() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public flat_SkillInfoData skillInfo() { return skillInfo(new flat_SkillInfoData()); }
  public flat_SkillInfoData skillInfo(flat_SkillInfoData obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int skillLevel() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public float remainCoolTime() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createflat_SkillSlotData(FlatBufferBuilder builder,
      int slotNum,
      int skillInfoOffset,
      int skillLevel,
      float remainCoolTime) {
    builder.startObject(4);
    flat_SkillSlotData.addRemainCoolTime(builder, remainCoolTime);
    flat_SkillSlotData.addSkillLevel(builder, skillLevel);
    flat_SkillSlotData.addSkillInfo(builder, skillInfoOffset);
    flat_SkillSlotData.addSlotNum(builder, slotNum);
    return flat_SkillSlotData.endflat_SkillSlotData(builder);
  }

  public static void startflat_SkillSlotData(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addSlotNum(FlatBufferBuilder builder, int slotNum) { builder.addInt(0, slotNum, 0); }
  public static void addSkillInfo(FlatBufferBuilder builder, int skillInfoOffset) { builder.addOffset(1, skillInfoOffset, 0); }
  public static void addSkillLevel(FlatBufferBuilder builder, int skillLevel) { builder.addInt(2, skillLevel, 0); }
  public static void addRemainCoolTime(FlatBufferBuilder builder, float remainCoolTime) { builder.addFloat(3, remainCoolTime, 0.0f); }
  public static int endflat_SkillSlotData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_SkillSlotData(FlatBufferBuilder builder,
 SkillSlotData data) {
        int skillInfoOffset = flat_SkillInfoData.createflat_SkillInfoData(builder, data.skillInfo);
        return createflat_SkillSlotData(builder , data.slotNum, skillInfoOffset, data.skillLevel, data.remainCoolTime);
    }

    public static byte[] createflat_SkillSlotData(SkillSlotData data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_SkillSlotData.createflat_SkillSlotData(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static SkillSlotData getRootAsflat_SkillSlotData(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        SkillSlotData result = new SkillSlotData(flat_SkillSlotData.getRootAsflat_SkillSlotData( buf ) );
        buf = null;
        return result;
    }

}