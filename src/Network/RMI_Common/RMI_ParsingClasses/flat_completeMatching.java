// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;

import Network.RMI_Classes.*;
import Network.AutoCreatedClass.*;
import io.netty.buffer.*;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_completeMatching extends Table {
  public static flat_completeMatching getRootAsflat_completeMatching(ByteBuffer _bb) { return getRootAsflat_completeMatching(_bb, new flat_completeMatching()); }
  public static flat_completeMatching getRootAsflat_completeMatching(ByteBuffer _bb, flat_completeMatching obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_completeMatching __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int worldMapID() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String ipAddress() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ipAddressAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer ipAddressInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int port() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createflat_completeMatching(FlatBufferBuilder builder,
      int worldMapID,
      int ipAddressOffset,
      int port) {
    builder.startObject(3);
    flat_completeMatching.addPort(builder, port);
    flat_completeMatching.addIpAddress(builder, ipAddressOffset);
    flat_completeMatching.addWorldMapID(builder, worldMapID);
    return flat_completeMatching.endflat_completeMatching(builder);
  }

  public static void startflat_completeMatching(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addWorldMapID(FlatBufferBuilder builder, int worldMapID) { builder.addInt(0, worldMapID, 0); }
  public static void addIpAddress(FlatBufferBuilder builder, int ipAddressOffset) { builder.addOffset(1, ipAddressOffset, 0); }
  public static void addPort(FlatBufferBuilder builder, int port) { builder.addInt(2, port, 0); }
  public static int endflat_completeMatching(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_completeMatching(FlatBufferBuilder builder,
 completeMatching data) {
        int ipAddressOffset = builder.createString(data.ipAddress);
        return createflat_completeMatching(builder , data.worldMapID, ipAddressOffset, data.port);
    }

    public static byte[] createflat_completeMatching(completeMatching data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_completeMatching.createflat_completeMatching(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static completeMatching getRootAsflat_completeMatching(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        completeMatching result = new completeMatching(flat_completeMatching.getRootAsflat_completeMatching( buf ) );
        buf = null;
        return result;
    }

}