// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;
import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_pickLogicIsVoipHost extends Table {
  public static flat_pickLogicIsVoipHost getRootAsflat_pickLogicIsVoipHost(ByteBuffer _bb) { return getRootAsflat_pickLogicIsVoipHost(_bb, new flat_pickLogicIsVoipHost()); }
  public static flat_pickLogicIsVoipHost getRootAsflat_pickLogicIsVoipHost(ByteBuffer _bb, flat_pickLogicIsVoipHost obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_pickLogicIsVoipHost __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean isVoipHost() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int worldMapID() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createflat_pickLogicIsVoipHost(FlatBufferBuilder builder,
      boolean isVoipHost,
      int worldMapID) {
    builder.startObject(2);
    flat_pickLogicIsVoipHost.addWorldMapID(builder, worldMapID);
    flat_pickLogicIsVoipHost.addIsVoipHost(builder, isVoipHost);
    return flat_pickLogicIsVoipHost.endflat_pickLogicIsVoipHost(builder);
  }

  public static void startflat_pickLogicIsVoipHost(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addIsVoipHost(FlatBufferBuilder builder, boolean isVoipHost) { builder.addBoolean(0, isVoipHost, false); }
  public static void addWorldMapID(FlatBufferBuilder builder, int worldMapID) { builder.addInt(1, worldMapID, 0); }
  public static int endflat_pickLogicIsVoipHost(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_pickLogicIsVoipHost(FlatBufferBuilder builder,
 pickLogicIsVoipHost data) {
        return createflat_pickLogicIsVoipHost(builder , data.isVoipHost, data.worldMapID);
    }

    public static byte[] createflat_pickLogicIsVoipHost(pickLogicIsVoipHost data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_pickLogicIsVoipHost.createflat_pickLogicIsVoipHost(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static pickLogicIsVoipHost getRootAsflat_pickLogicIsVoipHost(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        pickLogicIsVoipHost result = new pickLogicIsVoipHost(flat_pickLogicIsVoipHost.getRootAsflat_pickLogicIsVoipHost( buf ) );
        buf = null;
        return result;
    }

}