// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;

import Network.RMI_Classes.*;
import Network.AutoCreatedClass.*;
import io.netty.buffer.*;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_MessageData extends Table {
  public static flat_MessageData getRootAsflat_MessageData(ByteBuffer _bb) { return getRootAsflat_MessageData(_bb, new flat_MessageData()); }
  public static flat_MessageData getRootAsflat_MessageData(ByteBuffer _bb, flat_MessageData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_MessageData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String nickName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nickNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nickNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int channelNum() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int messageType() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String messageContent() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer messageContentAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer messageContentInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String sendTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sendTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer sendTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createflat_MessageData(FlatBufferBuilder builder,
      int nickNameOffset,
      int channelNum,
      int messageType,
      int messageContentOffset,
      int sendTimeOffset) {
    builder.startObject(5);
    flat_MessageData.addSendTime(builder, sendTimeOffset);
    flat_MessageData.addMessageContent(builder, messageContentOffset);
    flat_MessageData.addMessageType(builder, messageType);
    flat_MessageData.addChannelNum(builder, channelNum);
    flat_MessageData.addNickName(builder, nickNameOffset);
    return flat_MessageData.endflat_MessageData(builder);
  }

  public static void startflat_MessageData(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addNickName(FlatBufferBuilder builder, int nickNameOffset) { builder.addOffset(0, nickNameOffset, 0); }
  public static void addChannelNum(FlatBufferBuilder builder, int channelNum) { builder.addInt(1, channelNum, 0); }
  public static void addMessageType(FlatBufferBuilder builder, int messageType) { builder.addInt(2, messageType, 0); }
  public static void addMessageContent(FlatBufferBuilder builder, int messageContentOffset) { builder.addOffset(3, messageContentOffset, 0); }
  public static void addSendTime(FlatBufferBuilder builder, int sendTimeOffset) { builder.addOffset(4, sendTimeOffset, 0); }
  public static int endflat_MessageData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_MessageData(FlatBufferBuilder builder,
 MessageData data) {
        int nickNameOffset = builder.createString(data.nickName);
        int messageContentOffset = builder.createString(data.messageContent);
        int sendTimeOffset = builder.createString(data.sendTime);
        return createflat_MessageData(builder , nickNameOffset, data.channelNum, data.messageType, messageContentOffset, sendTimeOffset);
    }

    public static byte[] createflat_MessageData(MessageData data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_MessageData.createflat_MessageData(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static MessageData getRootAsflat_MessageData(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        MessageData result = new MessageData(flat_MessageData.getRootAsflat_MessageData( buf ) );
        buf = null;
        return result;
    }

}