// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;

import Network.RMI_Classes.*;
import Network.AutoCreatedClass.*;
import io.netty.buffer.*;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_createWorldMapCrystalDataEntityInfo extends Table {
  public static flat_createWorldMapCrystalDataEntityInfo getRootAsflat_createWorldMapCrystalDataEntityInfo(ByteBuffer _bb) { return getRootAsflat_createWorldMapCrystalDataEntityInfo(_bb, new flat_createWorldMapCrystalDataEntityInfo()); }
  public static flat_createWorldMapCrystalDataEntityInfo getRootAsflat_createWorldMapCrystalDataEntityInfo(ByteBuffer _bb, flat_createWorldMapCrystalDataEntityInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_createWorldMapCrystalDataEntityInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public flat_CrystalData crystalList(int j) { return crystalList(new flat_CrystalData(), j); }
  public flat_CrystalData crystalList(flat_CrystalData obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int crystalListLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createflat_createWorldMapCrystalDataEntityInfo(FlatBufferBuilder builder,
      int crystalListOffset) {
    builder.startObject(1);
    flat_createWorldMapCrystalDataEntityInfo.addCrystalList(builder, crystalListOffset);
    return flat_createWorldMapCrystalDataEntityInfo.endflat_createWorldMapCrystalDataEntityInfo(builder);
  }

  public static void startflat_createWorldMapCrystalDataEntityInfo(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addCrystalList(FlatBufferBuilder builder, int crystalListOffset) { builder.addOffset(0, crystalListOffset, 0); }
  public static int createCrystalListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCrystalListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endflat_createWorldMapCrystalDataEntityInfo(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_createWorldMapCrystalDataEntityInfo(FlatBufferBuilder builder,
 createWorldMapCrystalDataEntityInfo data) {
        int size0 = data.crystalList.size();
        int[] crystalList_ = new int[size0];
        for (int x = 0; x < size0; x++) {
        CrystalData aa = data.crystalList.poll();
        crystalList_[x] = flat_CrystalData.createflat_CrystalData(builder, aa);
        }
        int crystalListOffset = flat_createWorldMapCrystalDataEntityInfo.createCrystalListVector(builder, crystalList_);
        return createflat_createWorldMapCrystalDataEntityInfo(builder , crystalListOffset);
    }

    public static byte[] createflat_createWorldMapCrystalDataEntityInfo(createWorldMapCrystalDataEntityInfo data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_createWorldMapCrystalDataEntityInfo.createflat_createWorldMapCrystalDataEntityInfo(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static createWorldMapCrystalDataEntityInfo getRootAsflat_createWorldMapCrystalDataEntityInfo(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        createWorldMapCrystalDataEntityInfo result = new createWorldMapCrystalDataEntityInfo(flat_createWorldMapCrystalDataEntityInfo.getRootAsflat_createWorldMapCrystalDataEntityInfo( buf ) );
        buf = null;
        return result;
    }

}