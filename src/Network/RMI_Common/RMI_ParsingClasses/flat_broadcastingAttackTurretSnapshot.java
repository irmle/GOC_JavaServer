// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;

import Network.RMI_Classes.*;
import Network.AutoCreatedClass.*;
import io.netty.buffer.*;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_broadcastingAttackTurretSnapshot extends Table {
  public static flat_broadcastingAttackTurretSnapshot getRootAsflat_broadcastingAttackTurretSnapshot(ByteBuffer _bb) { return getRootAsflat_broadcastingAttackTurretSnapshot(_bb, new flat_broadcastingAttackTurretSnapshot()); }
  public static flat_broadcastingAttackTurretSnapshot getRootAsflat_broadcastingAttackTurretSnapshot(ByteBuffer _bb, flat_broadcastingAttackTurretSnapshot obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_broadcastingAttackTurretSnapshot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public flat_AttackTurretData attackTurretSnapshot(int j) { return attackTurretSnapshot(new flat_AttackTurretData(), j); }
  public flat_AttackTurretData attackTurretSnapshot(flat_AttackTurretData obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int attackTurretSnapshotLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createflat_broadcastingAttackTurretSnapshot(FlatBufferBuilder builder,
      int attackTurretSnapshotOffset) {
    builder.startObject(1);
    flat_broadcastingAttackTurretSnapshot.addAttackTurretSnapshot(builder, attackTurretSnapshotOffset);
    return flat_broadcastingAttackTurretSnapshot.endflat_broadcastingAttackTurretSnapshot(builder);
  }

  public static void startflat_broadcastingAttackTurretSnapshot(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addAttackTurretSnapshot(FlatBufferBuilder builder, int attackTurretSnapshotOffset) { builder.addOffset(0, attackTurretSnapshotOffset, 0); }
  public static int createAttackTurretSnapshotVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAttackTurretSnapshotVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endflat_broadcastingAttackTurretSnapshot(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_broadcastingAttackTurretSnapshot(FlatBufferBuilder builder,
 broadcastingAttackTurretSnapshot data) {
        int size0 = data.attackTurretSnapshot.size();
        int[] attackTurretSnapshot_ = new int[size0];
        for (int x = 0; x < size0; x++) {
        AttackTurretData aa = data.attackTurretSnapshot.poll();
        attackTurretSnapshot_[x] = flat_AttackTurretData.createflat_AttackTurretData(builder, aa);
        }
        int attackTurretSnapshotOffset = flat_broadcastingAttackTurretSnapshot.createAttackTurretSnapshotVector(builder, attackTurretSnapshot_);
        return createflat_broadcastingAttackTurretSnapshot(builder , attackTurretSnapshotOffset);
    }

    public static byte[] createflat_broadcastingAttackTurretSnapshot(broadcastingAttackTurretSnapshot data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_broadcastingAttackTurretSnapshot.createflat_broadcastingAttackTurretSnapshot(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static broadcastingAttackTurretSnapshot getRootAsflat_broadcastingAttackTurretSnapshot(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        broadcastingAttackTurretSnapshot result = new broadcastingAttackTurretSnapshot(flat_broadcastingAttackTurretSnapshot.getRootAsflat_broadcastingAttackTurretSnapshot( buf ) );
        buf = null;
        return result;
    }

}