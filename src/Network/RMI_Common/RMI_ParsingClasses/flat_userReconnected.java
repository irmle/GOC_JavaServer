// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;
import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_userReconnected extends Table {
  public static flat_userReconnected getRootAsflat_userReconnected(ByteBuffer _bb) { return getRootAsflat_userReconnected(_bb, new flat_userReconnected()); }
  public static flat_userReconnected getRootAsflat_userReconnected(ByteBuffer _bb, flat_userReconnected obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_userReconnected __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int userEntityID() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createflat_userReconnected(FlatBufferBuilder builder,
      int userEntityID) {
    builder.startObject(1);
    flat_userReconnected.addUserEntityID(builder, userEntityID);
    return flat_userReconnected.endflat_userReconnected(builder);
  }

  public static void startflat_userReconnected(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addUserEntityID(FlatBufferBuilder builder, int userEntityID) { builder.addInt(0, userEntityID, 0); }
  public static int endflat_userReconnected(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_userReconnected(FlatBufferBuilder builder,
 userReconnected data) {
        return createflat_userReconnected(builder , data.userEntityID);
    }

    public static byte[] createflat_userReconnected(userReconnected data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_userReconnected.createflat_userReconnected(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static userReconnected getRootAsflat_userReconnected(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        userReconnected result = new userReconnected(flat_userReconnected.getRootAsflat_userReconnected( buf ) );
        buf = null;
        return result;
    }

}