// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;
import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_pingCheck_Request extends Table {
  public static flat_pingCheck_Request getRootAsflat_pingCheck_Request(ByteBuffer _bb) { return getRootAsflat_pingCheck_Request(_bb, new flat_pingCheck_Request()); }
  public static flat_pingCheck_Request getRootAsflat_pingCheck_Request(ByteBuffer _bb, flat_pingCheck_Request obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_pingCheck_Request __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float timeData() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createflat_pingCheck_Request(FlatBufferBuilder builder,
      float timeData) {
    builder.startObject(1);
    flat_pingCheck_Request.addTimeData(builder, timeData);
    return flat_pingCheck_Request.endflat_pingCheck_Request(builder);
  }

  public static void startflat_pingCheck_Request(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addTimeData(FlatBufferBuilder builder, float timeData) { builder.addFloat(0, timeData, 0.0f); }
  public static int endflat_pingCheck_Request(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_pingCheck_Request(FlatBufferBuilder builder,
 pingCheck_Request data) {
        return createflat_pingCheck_Request(builder , data.timeData);
    }

    public static byte[] createflat_pingCheck_Request(pingCheck_Request data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_pingCheck_Request.createflat_pingCheck_Request(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static pingCheck_Request getRootAsflat_pingCheck_Request(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        pingCheck_Request result = new pingCheck_Request(flat_pingCheck_Request.getRootAsflat_pingCheck_Request( buf ) );
        buf = null;
        return result;
    }

}