// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;
import Network.AutoCreatedClass.*;

import static java.nio.ByteBuffer.wrap;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;
@SuppressWarnings("unused")
public final class flat_broadcastingMonsterSnapshot extends Table {
  public static flat_broadcastingMonsterSnapshot getRootAsflat_broadcastingMonsterSnapshot(ByteBuffer _bb) { return getRootAsflat_broadcastingMonsterSnapshot(_bb, new flat_broadcastingMonsterSnapshot()); }
  public static flat_broadcastingMonsterSnapshot getRootAsflat_broadcastingMonsterSnapshot(ByteBuffer _bb, flat_broadcastingMonsterSnapshot obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_broadcastingMonsterSnapshot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public flat_MonsterData monsterSnapshot(int j) { return monsterSnapshot(new flat_MonsterData(), j); }
  public flat_MonsterData monsterSnapshot(flat_MonsterData obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int monsterSnapshotLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createflat_broadcastingMonsterSnapshot(FlatBufferBuilder builder,
      int monsterSnapshotOffset) {
    builder.startObject(1);
    flat_broadcastingMonsterSnapshot.addMonsterSnapshot(builder, monsterSnapshotOffset);
    return flat_broadcastingMonsterSnapshot.endflat_broadcastingMonsterSnapshot(builder);
  }

  public static void startflat_broadcastingMonsterSnapshot(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addMonsterSnapshot(FlatBufferBuilder builder, int monsterSnapshotOffset) { builder.addOffset(0, monsterSnapshotOffset, 0); }
  public static int createMonsterSnapshotVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMonsterSnapshotVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endflat_broadcastingMonsterSnapshot(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_broadcastingMonsterSnapshot(FlatBufferBuilder builder,
 broadcastingMonsterSnapshot data) {
        int size0 = data.monsterSnapshot.size();
        int[] monsterSnapshot_ = new int[size0];
        for (int x = 0; x < size0; x++) {
        MonsterData aa = data.monsterSnapshot.poll();
        monsterSnapshot_[x] = flat_MonsterData.createflat_MonsterData(builder, aa);
        }
        int monsterSnapshotOffset = flat_broadcastingMonsterSnapshot.createMonsterSnapshotVector(builder, monsterSnapshot_);
        return createflat_broadcastingMonsterSnapshot(builder , monsterSnapshotOffset);
    }

    public static byte[] createflat_broadcastingMonsterSnapshot(broadcastingMonsterSnapshot data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_broadcastingMonsterSnapshot.createflat_broadcastingMonsterSnapshot(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static broadcastingMonsterSnapshot getRootAsflat_broadcastingMonsterSnapshot(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        broadcastingMonsterSnapshot result = new broadcastingMonsterSnapshot(flat_broadcastingMonsterSnapshot.getRootAsflat_broadcastingMonsterSnapshot( buf ) );
        buf = null;
        return result;
    }

}