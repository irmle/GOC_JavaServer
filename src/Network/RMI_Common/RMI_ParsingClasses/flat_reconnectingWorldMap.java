// automatically generated by the FlatBuffers compiler, do not modify

package Network.RMI_Common.RMI_ParsingClasses;

import Network.RMI_Classes.*;
import Network.AutoCreatedClass.*;
import io.netty.buffer.*;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class flat_reconnectingWorldMap extends Table {
  public static flat_reconnectingWorldMap getRootAsflat_reconnectingWorldMap(ByteBuffer _bb) { return getRootAsflat_reconnectingWorldMap(_bb, new flat_reconnectingWorldMap()); }
  public static flat_reconnectingWorldMap getRootAsflat_reconnectingWorldMap(ByteBuffer _bb, flat_reconnectingWorldMap obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public flat_reconnectingWorldMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int worldMapID() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public flat_LoadingPlayerData loadingPlayerList(int j) { return loadingPlayerList(new flat_LoadingPlayerData(), j); }
  public flat_LoadingPlayerData loadingPlayerList(flat_LoadingPlayerData obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int loadingPlayerListLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public String ipAddress() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ipAddressAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ipAddressInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public int port() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createflat_reconnectingWorldMap(FlatBufferBuilder builder,
      int worldMapID,
      int loadingPlayerListOffset,
      int ipAddressOffset,
      int port) {
    builder.startObject(4);
    flat_reconnectingWorldMap.addPort(builder, port);
    flat_reconnectingWorldMap.addIpAddress(builder, ipAddressOffset);
    flat_reconnectingWorldMap.addLoadingPlayerList(builder, loadingPlayerListOffset);
    flat_reconnectingWorldMap.addWorldMapID(builder, worldMapID);
    return flat_reconnectingWorldMap.endflat_reconnectingWorldMap(builder);
  }

  public static void startflat_reconnectingWorldMap(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addWorldMapID(FlatBufferBuilder builder, int worldMapID) { builder.addInt(0, worldMapID, 0); }
  public static void addLoadingPlayerList(FlatBufferBuilder builder, int loadingPlayerListOffset) { builder.addOffset(1, loadingPlayerListOffset, 0); }
  public static int createLoadingPlayerListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLoadingPlayerListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIpAddress(FlatBufferBuilder builder, int ipAddressOffset) { builder.addOffset(2, ipAddressOffset, 0); }
  public static void addPort(FlatBufferBuilder builder, int port) { builder.addInt(3, port, 0); }
  public static int endflat_reconnectingWorldMap(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
    public static int createflat_reconnectingWorldMap(FlatBufferBuilder builder,
 reconnectingWorldMap data) {
        int size1 = data.loadingPlayerList.size();
        int[] loadingPlayerList_ = new int[size1];
        for (int x = 0; x < size1; x++) {
        LoadingPlayerData aa = data.loadingPlayerList.poll();
        loadingPlayerList_[x] = flat_LoadingPlayerData.createflat_LoadingPlayerData(builder, aa);
        }
        int loadingPlayerListOffset = flat_reconnectingWorldMap.createLoadingPlayerListVector(builder, loadingPlayerList_);
        int ipAddressOffset = builder.createString(data.ipAddress);
        return createflat_reconnectingWorldMap(builder , data.worldMapID, loadingPlayerListOffset, ipAddressOffset, data.port);
    }

    public static byte[] createflat_reconnectingWorldMap(reconnectingWorldMap data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder();
        fbb.finish(flat_reconnectingWorldMap.createflat_reconnectingWorldMap(fbb, data));
        byte[] result = fbb.sizedByteArray();
        fbb = null;
        return result;
    }

    public static reconnectingWorldMap getRootAsflat_reconnectingWorldMap(byte[] data) {
        ByteBuffer buf = ByteBuffer.wrap(data);
        reconnectingWorldMap result = new reconnectingWorldMap(flat_reconnectingWorldMap.getRootAsflat_reconnectingWorldMap( buf ) );
        buf = null;
        return result;
    }

}